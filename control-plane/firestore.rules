rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	function canRead(uid) {
    	let existingUsersPath = /databases/$(database)/documents/user-management/users/existing-users/$(uid);
    	let userRole = get(existingUsersPath).data.role;
    	return (userRole == "admin" || userRole == "editor" || userRole == "viewer");
    }
    
    function isAdmin(uid) {
    	let existingUsersPath = /databases/$(database)/documents/user-management/users/existing-users/$(uid);
    	let userRole = get(existingUsersPath).data.role;
    	return userRole == "admin";
    }
  
    match /jobs/{document=**} {
      allow read: if request.auth != null && canRead(request.auth.uid);
    }
    
    match /jobs-test/{document=**} {
      allow read: if request.auth != null && canRead(request.auth.uid);
    }
    
    match /{path=**}/levels/{level} {
      allow read: if request.auth != null && canRead(request.auth.uid);
    }
    
    match /user-management/users/pending-users/{uid}  {
    	allow read: if request.auth != null && (request.auth.token.email == "admin@chromium.org" || isAdmin(request.auth.uid))
    	allow create: if request.auth != null && (request.auth.uid == request.resource.id || request.auth.token.email == "admin@chromium.org" || isAdmin(request.auth.uid)) && request.resource.data.keys().hasOnly(['time', 'email']);
      allow delete: if request.auth != null && (request.auth.token.email == "admin@chromium.org" || isAdmin(request.auth.uid))
    }
    
    match /user-management/users/existing-users/{uid}  {
    	allow read: if (request.auth != null && request.auth.uid == uid) || (request.auth.token.email == "admin@chromium.org" || isAdmin(uid));
      allow create, delete: if request.auth != null && (request.auth.token.email == "admin@chromium.org" || isAdmin(request.auth.uid));
    }
    
  }
}